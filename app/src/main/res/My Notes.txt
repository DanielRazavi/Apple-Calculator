The numbers are going to be built into the 
system and their respective functionalities.

The operations are going to be objects of 
some sort where they are called once they're
clicked. 

So far I don't know if there should be an
implementation or extension to start it, but
I do know that almost all operations are
either two parameters or one, and they do 
return something.

So I'm thinking an interface that you give
the parameters to and it returns the needed
integer.

Just learned what Shunting-Yard algorithm is
and what a Reverse Polish Notation is. Very
helpful.

The numbers and operations should be tokens,
so that they can easily be inside the stack
and queue.

Where should I apply the Stack and Queue?
Would it be in onCreate? Probably, and then
calling different metods of those
datastructures in each button's case in
onClick.

gotta reset used_already to false in 
operation calls.

so numbers and operations somehow have to go
into a queue/stack.

Shunting-yard is already happening, but when
is Postfix supposed to happen?

the min a operator token is clicked pop
a token from number stack and put it on the
right operand, and another one and put it on
the left operand. Evaluate the formula, and
then push the result into the NumberStack.

but wait 2 + 3 + will result in a premature
solution, whereas 2 + 3 x needs another
parameter, why? okay I think I understand
the algorithm.

what about number types? how do I decide on
that?

programatically switch between different 
number types? or is there an easier way?

Need to fix up percent and equal button.

Should I make percent a helper function?
and if so, can I put it into another file? 
In order to do that, I need to make a 
utility class so that each method is a 
helper function. For now make it in Main 
Activity.

wait so have you considered all 
possibilities of the process button?

Need to make sure buttons actually change
the user view. They do! Yay!

App is done now, need to debug from now.
